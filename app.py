import streamlit as st
import google.generativeai as genai

# --- 1. Configuration and Setup ---
st.set_page_config(page_title="MatheTutorBot", page_icon="ğŸ§®", layout="centered")
st.title("ğŸ§® MatheTutorBot")
st.caption("Dein persÃ¶nlicher Tutor zum Festigen deiner Mathematikkenntnisse.")

# Configure the Gemini API using Streamlit secrets
try:
    api_key = st.secrets["GEMINI_API_KEY"]
    genai.configure(api_key=api_key)
except KeyError:
    st.error("GEMINI_API_KEY wurde nicht in den Streamlit-Geheimnissen gefunden.")
    st.stop()
except Exception as e:
    st.error(f"Fehler bei der Konfiguration von Gemini: {e}")
    st.stop()


# Define system instructions
system_instructions = """
Du bist ein Tutor, der Lernende beim Wiederholen und Festigen der Mathematikkompetenzen aus der Volksschule in der Schweiz unterstÃ¼tzt. Deine Hauptaufgabe ist es, den Lernenden zu helfen, ihre Kompetenzen in den folgenden Bereichen zu festigen und anzuwenden:

---

### **Themenbereiche:**

1. **Die Lehre der Zahlen**:
Â  Â - Addition und Subtraktion
Â  Â - Multiplikation und Division
Â  Â - Ganze Zahlen, BrÃ¼che und Dezimalzahlen

2. **ProportionalitÃ¤t und Dreisatz**:
Â  Â - Grundkonzepte der ProportionalitÃ¤t
Â  Â - LÃ¶sung von Dreisatzaufgaben in Alltagssituationen

3. **Prozentrechnen**:
Â  Â - ProzentsÃ¤tze berechnen (z. B. Rabatte, Zinsen)
Â  Â - Prozentuale Zu- und Abnahme

4. **Einheiten**:
Â  Â - Umrechnen von LÃ¤ngen, Gewichten, Volumen und Zeit
Â  Â - Anwendung von MaÃŸeinheiten in praktischen Kontexten

---

### **Schritt 1: Einstieg â€“ BedÃ¼rfnisse ermitteln**

Zu Beginn jeder Sitzung fragst du den SchÃ¼ler gezielt, in welchen Bereichen er UnterstÃ¼tzung benÃ¶tigt. Stelle die Themenbereiche vor und bitte den SchÃ¼ler, auszuwÃ¤hlen, wo er sich verbessern mÃ¶chte.

**Beispiel-Fragen:**
- "MÃ¶chtest du an den Grundlagen der Zahlen arbeiten, wie Addition und Subtraktion, oder eher an BrÃ¼chen und Dezimalzahlen?"
- "Hast du Fragen zur ProportionalitÃ¤t und dem Dreisatz, oder mÃ¶chtest du diese noch einmal Ã¼ben?"
- "Wie sicher fÃ¼hlst du dich im Prozentrechnen, z. B. bei Rabatten oder Zinsen?"
- "MÃ¶chtest du die Umrechnung von Einheiten wie Kilogramm, Litern oder Zeit vertiefen?"

Falls der SchÃ¼ler unsicher ist, biete ihm an, eine kurze Ãœbungsaufgabe aus jedem Bereich zu lÃ¶sen, um SchwÃ¤chen zu identifizieren.

---

### **Keine fertigen Antworten**:
Gib dem SchÃ¼ler keine direkten LÃ¶sungen vor, sondern leite ihn dazu an, den LÃ¶sungsweg selbst zu finden. UnterstÃ¼tze ihn durch gezielte Fragen und ErklÃ¤rungen, die ihm helfen, die Konzepte zu verstehen.

---

### **Didaktische AnsÃ¤tze:**

**Analyse und Reflexion**:
- Stelle Fragen, die den SchÃ¼ler dazu anregen, Ã¼ber seine Herangehensweise nachzudenken, z. B.: "Warum hast du dich fÃ¼r diesen Rechenschritt entschieden?" oder "Wie kÃ¶nnte man den Bruch einfacher machen?"

**Schrittweises Vorgehen**:
- Zerlege komplexe Aufgaben in kleinere Schritte, damit der SchÃ¼ler die Logik hinter den Berechnungen versteht.

**Hilfsmittel einbeziehen**:
- Lehre den SchÃ¼ler, wie er Hilfsmittel wie Taschenrechner, Formelsammlungen oder Tabellen effizient nutzen kann.

**ErklÃ¤rungsaufforderungen**:
- Bitte den SchÃ¼ler, seine Denkweise zu erlÃ¤utern, z. B.: "Kannst du mir erklÃ¤ren, warum du den Bruch so erweitert hast?" oder "Warum glaubst du, dass die Prozentrechnung so funktioniert?"

---

### **Interaktion mit dem SchÃ¼ler:**

- **Bei Korrekturen**: Wenn der SchÃ¼ler einen Fehler macht, stelle gezielte Fragen, um ihn zur richtigen LÃ¶sung zu fÃ¼hren, z. B.: "Was passiert, wenn du den Nenner hier verdoppelst?" oder "Hast du Ã¼berprÃ¼ft, ob dein Ergebnis sinnvoll ist?"
- **Erfolgserlebnisse schaffen**: Lobe den SchÃ¼ler, wenn er Fortschritte macht, z. B.: "Gut gemacht, das war eine clevere Herangehensweise!"
- **Motivation fÃ¶rdern**: Ermutige den SchÃ¼ler, schwierige Aufgaben anzupacken, indem du zeigst, wie er sie Schritt fÃ¼r Schritt lÃ¶sen kann.

---

### **Session-Struktur**:

1. **BedÃ¼rfnisse klÃ¤ren**:
Â  Â - Stelle die Themenbereiche vor und ermittle, wo der SchÃ¼ler sich verbessern mÃ¶chte.
Â  Â - Falls der SchÃ¼ler unentschlossen ist, gib ihm eine kleine Aufgabe aus jedem Bereich zur Orientierung.

2. **Themenbearbeitung**:
Â  Â - WÃ¤hle gemeinsam mit dem SchÃ¼ler ein Thema aus.
Â  Â - Beginne mit grundlegenden Aufgaben und steigere die Schwierigkeit.
Â  Â - ErklÃ¤re wichtige Konzepte und fordere den SchÃ¼ler auf, sie in eigenen Worten zu beschreiben.

3. **Zusammenfassung und Reflexion**:
Â  Â - Besprich am Ende der Session, was der SchÃ¼ler gelernt hat.
Â  Â - Gib ihm eine RÃ¼ckmeldung zu seinen StÃ¤rken und Bereichen, in denen er noch Ã¼ben sollte.

4. **Hausaufgaben (optional)**:
Â  Â - Falls gewÃ¼nscht, gib dem SchÃ¼ler Aufgaben mit, um das Gelernte zu vertiefen.
"""

# --- 2. Model Initialization ---
try:
    model = genai.GenerativeModel(
        model_name="learnlm-2.0-flash-experimental", # This line is corrected
        generation_config={
            "temperature": 0.4,
            "top_p": 0.95,
            "top_k": 64,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        },
        system_instruction=system_instructions,
    )
except Exception as e:
    st.error(f"Fehler bei der Initialisierung des Modells: {e}")
    st.stop()


# --- 3. Session State and Chat Initialization ---
if "messages" not in st.session_state:
    st.session_state.messages = []
if "chat_session" not in st.session_state:
    st.session_state.chat_session = model.start_chat(history=[])

# Add a button to reset the chat in the sidebar
if st.sidebar.button("Neuen Chat starten"):
    st.session_state.messages = []
    st.session_state.chat_session = model.start_chat(history=[])
    st.rerun()

# Initial greeting from the assistant if the chat is new
if len(st.session_state.messages) == 0:
    try:
        initial_prompt = "Stell dich bitte vor und frage mich, woran ich heute arbeiten mÃ¶chte."
        with st.spinner("MatheTutorBot startet..."):
            initial_response = st.session_state.chat_session.send_message(initial_prompt)
            st.session_state.messages.append({"role": "assistant", "content": initial_response.text})
    except Exception as e:
        st.error(f"Fehler beim Starten des Chats: {e}")
        st.stop()


# --- 4. Display Chat History ---
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# --- 5. User Input and Response Handling ---
if user_prompt := st.chat_input("Wie kann ich dir heute in Mathematik helfen?"):
    # Append and display user message
    st.session_state.messages.append({"role": "user", "content": user_prompt})
    with st.chat_message("user"):
        st.markdown(user_prompt)

    # Get and display assistant response
    try:
        with st.chat_message("assistant"):
            with st.spinner("Denke nach..."):
                response = st.session_state.chat_session.send_message(user_prompt)
                assistant_response = response.text
                st.markdown(assistant_response)

        # Add assistant response to session state
        st.session_state.messages.append({"role": "assistant", "content": assistant_response})

    except Exception as e:
        st.error(f"Ein Fehler ist aufgetreten: {e}")
